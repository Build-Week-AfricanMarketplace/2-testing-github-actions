import collapseAdjacentRules from "./lib/collapse-adjacent-rules.js";
import collapseDuplicateDeclarations from "./lib/collapse-duplicate-declarations.js";
import detectNesting from "./lib/detect-nesting.js";
import evaluateAileronFunctions from "./lib/evaluate-aileron-functions.js";
import expandAileronAtRules from "./lib/expand-aileron-at-rules.js";
import expandApplyAtRules from "./lib/expand-apply-at-rules.js";
import normalizeAileronDirectives from "./lib/normalize-aileron-directives.js";
import partitionApplyAtRules from "./lib/partition-apply-at-rules.js";
import resolveDefaultsAtRules from "./lib/resolve-defaults-at-rules.js";
import { createContext } from "./lib/setup-context-utils.js";
import substituteScreenAtRules from "./lib/substitute-screen-at-rules.js";

export default function processAileronFeatures(setupContext) {
  return function (root, result) {
    const { aileronDirectives, applyDirectives } = normalizeAileronDirectives(root);

    detectNesting()(root, result);

    // Partition apply rules that are found in the css
    // itself.
    partitionApplyAtRules()(root, result);

    const context = setupContext({
      aileronDirectives,
      applyDirectives,
      registerDependency(dependency) {
        result.messages.push({
          plugin: "@aileron/styles",
          parent: result.opts.from,
          ...dependency
        });
      },
      createContext(aileronConfig, changedContent) {
        return createContext(aileronConfig, changedContent, root);
      }
    })(root, result);

    if (context.aileronConfig.separator === "-") {
      throw new Error(
        "The '-' character cannot be used as a custom separator in JIT mode due to parsing ambiguity. Please use another character like '_' instead."
      );
    }

    expandAileronAtRules(context)(root, result);
    // Partition apply rules that are generated by
    // addComponents, addUtilities and so on.
    partitionApplyAtRules()(root, result);
    expandApplyAtRules(context)(root, result);
    evaluateAileronFunctions(context)(root, result);
    substituteScreenAtRules(context)(root, result);
    resolveDefaultsAtRules(context)(root, result);
    collapseAdjacentRules(context)(root, result);
    collapseDuplicateDeclarations(context)(root, result);
  };
}
